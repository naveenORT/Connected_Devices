import unittest
from labs.common.SensorData import SensorData
from labs.module03.TempSensorAdaptor import TempSensorAdaptor
from labs.module03.TempSensorAdaptor import data_object

"""
******************************************************Module Description************************************************************
-> This test module checks parameters & public functions associated with SensorData class, which helps in recording Temperature sensor \
   values generated by sensor coupled with iot-device 
************************************************************************************************************************************
"""


class SensorDataTest(unittest.TestCase):
	"""
	* Setting up TempSensorAdaptor class object, that invokes its threaded class TempSensorAdaptorTask 
	* TempSensorAdaptorTask records temperature data in data_object an instance of SensorData class 
	""" 

	def setUp(self):
		adaptor_object = TempSensorAdaptor()
		self.sensor_object = data_object
	
	""" 
	* This function gets current temperature value recorded by Sensordata class and checks for its type associated & range 
	""" 
	
	def testcurvalue(self):
		self.assertTrue(self.sensor_object.getcurvalue() >= 0.0 and self.sensor_object.getcurvalue() <= 100.0  , "Not in RANGE")
		self.assertTrue(isinstance(self.sensor_object.getcurvalue(), float), "Its not a float ")  # Checking Current Value is float
	
	""" 
	* This function gets average temperature value recorded by Sensordata class and checks for its type associated & range 
	""" 	

	def testavgvalue(self):
		self.assertTrue(self.sensor_object.getavgvalue() >= 0.0 and self.sensor_object.getavgvalue() <= 100.0  , "Not in RANGE")
		self.assertTrue(isinstance(self.sensor_object.getavgvalue(), float), "Its not a float")  # Checking average Value is float

	""" 
	* This function gets minimum temperature value recorded by Sensordata class and checks for its type associated & range 
	""" 

	def testminvalue(self):	
		self.assertTrue(self.sensor_object.getminvalue() >= 0.0 and self.sensor_object.getminvalue() <= 100.0  , "Not in RANGE")
		self.assertTrue(isinstance(self.sensor_object.getminvalue(), float), "Its not a float ")  # Checking min value is float

	""" 
	* This function gets maximum temperature value recorded by Sensordata class and checks for its type associated & range 
	""" 

	def testmaxvalue(self):	
		self.assertTrue(self.sensor_object.getmaxvalue() >= 0.0 and self.sensor_object.getmaxvalue() <= 100.0  , "Not in RANGE")
		self.assertTrue(isinstance(self.sensor_object.getmaxvalue(), float), "Its not a float ")  # Checking max value is float

	""" 
	* This function gets count value recorded by Sensordata class and checks for its type associated & range 
	""" 

	def testcountvalue(self):
		self.assertTrue(self.sensor_object.getsamplecount() >= 0.0 and self.sensor_object.getsamplecount() <= 30.0  , "Not in RANGE")
		self.assertTrue(isinstance(self.sensor_object.gettotvalue(), float), "Its not a float ")  # Checking count value is float

	""" 
	* This function gets total temperature value recorded by Sensordata class and checks for its type associated & range 
	""" 

	def testtotalvalue(self):
		self.assertTrue(self.sensor_object.gettotvalue() >= 0.0 and self.sensor_object.gettotvalue() <= 1000.0  , "Not in RANGE")
		self.assertTrue(isinstance(self.sensor_object.gettotvalue(), float), "Its not a float ")  # Checking total value is float
		

if __name__ == "__main__":
	unittest.main()  # Main Function
